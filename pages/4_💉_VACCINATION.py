import calendar  # Core Python Module
from datetime import datetime  # Core Python Module
import pandas as pd
import plotly.express as px
import streamlit as st 
from streamlit_option_menu import option_menu
from st_aggrid import AgGrid
from st_aggrid.grid_options_builder import GridOptionsBuilder
import database as db
from streamlit_extras.switch_page_button import switch_page


def interactive_df(data):
   gb = GridOptionsBuilder.from_dataframe(data)
   gb.configure_pagination(paginationAutoPageSize=True) #Add pagination
   gb.configure_side_bar() #Add a sidebar
   #gb.configure_selection('multiple', use_checkbox=True, groupSelectsChildren="Group checkbox select children") #Enable multi-row selection
   gridOptions = gb.build()
   grid_response = AgGrid(
    data,
    gridOptions=gridOptions,
    data_return_mode='AS_INPUT', 
    update_mode='MODEL_CHANGED', 
    fit_columns_on_grid_load=False,
    theme='streamlit', #Add theme color to the table
    enable_enterprise_modules=True,
    height=350, 
    width='100%',
    reload_data=True
    )

# -------------- SETTINGS --------------
currency = "‡ß≥"
page_title = "Al-Barakah Tracker"
page_icon = ":poodle:"  # emojis: https://www.webfx.com/tools/emoji-cheat-sheet/
layout = "centered"
# --------------------------------------

st.set_page_config(page_title=page_title, page_icon=page_icon, layout=layout)
home = st.button("HOME üè†")
if home:
    switch_page("HOME")
st.title(page_title + " " + page_icon)


# --- HIDE STREAMLIT STYLE ---
hide_st_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            </style>
            """
st.markdown(hide_st_style, unsafe_allow_html=True)

# --- NAVIGATION MENU ---
selected = option_menu(
    menu_title=None,
    options=["‡¶ü‡¶ø‡¶ï‡¶æ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø", "‡¶ü‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü", "‡¶®‡¶§‡ßÅ‡¶® ‡¶õ‡¶æ‡¶ó‡¶≤ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø"],
    icons=["", "bar-chart-fill", "pencil-fill", ],  # https://icons.getbootstrap.com/
    orientation="horizontal",
)

if selected == "‡¶®‡¶§‡ßÅ‡¶® ‡¶õ‡¶æ‡¶ó‡¶≤ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø":
    # --- DROP DOWN VALUES FOR SELECTING THE PERIOD ---
    years = [datetime.today().year, datetime.today().year + 1]
    months = list(calendar.month_name[1:])
    
    "---"
    with st.expander("‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶´‡¶∞‡ßç‡¶Æ"):
        with st.form("entry_form", clear_on_submit=True):
            g_all = db.fetch_all_periods_animal()
            df_vaccine = pd.DataFrame(g_all)
            if df_vaccine.empty:
                goat_num = 1
                goat_num = int(1)
            else:
                goat_num = df_vaccine["goat_number"].max()
                goat_num = goat_num + 1
                goat_num = int(goat_num)
            
            st.subheader("‡¶õ‡¶æ‡¶ó‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ : AB-" + str(goat_num) )
            breed = st.selectbox("‡¶ú‡¶æ‡¶§", options=("‡¶¨‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ï ‡¶¨‡ßá‡¶ô‡ßç‡¶ó‡¶≤ ‡¶õ‡¶æ‡¶ó‡¶≤", "‡¶Ø‡¶Æ‡ßÅ‡¶®‡¶æ‡¶™‡¶æ‡¶∞‡¶ø ‡¶õ‡¶æ‡¶ó‡¶≤", "‡¶¨‡¶ø‡¶ü‡¶≤ ‡¶õ‡¶æ‡¶ó‡¶≤", "‡¶¨‡ßã‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶õ‡¶æ‡¶ó‡¶≤", "‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞‡¶ø ‡¶õ‡¶æ‡¶ó‡¶≤"))
            gender = st.selectbox("‡¶ú‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞", options=("‡¶™‡ßÅ‡¶∞‡ßÅ‡¶∑ ‡¶õ‡¶æ‡¶ó‡¶≤", "‡¶Æ‡¶π‡¶ø‡¶≤‡¶æ ‡¶õ‡¶æ‡¶ó‡¶≤"))
            color = st.text_input("‡¶∞‡¶ô")
            purchase_or_birth = st.selectbox("‡¶ï‡ßá‡¶®‡¶æ ‡¶®‡¶æ‡¶ï‡¶ø ‡¶ú‡¶®‡ßç‡¶Æ?", options=("‡¶ï‡ßá‡¶®‡¶æ", "‡¶ú‡¶®‡ßç‡¶Æ"))
            d = st.date_input("‡¶ï‡ßá‡¶®‡¶æ ‡¶¨‡¶æ ‡¶ú‡¶®‡ßç‡¶Æ‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ")
            year = d.year
            month = d.month
            day = d.day
            age = st.number_input("‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßü‡¶∏ (‡¶Æ‡¶æ‡¶∏)")
            weight = st.number_input("‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ì‡¶ú‡¶® (‡¶ï‡ßá‡¶ú‡¶ø ‡¶ì ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ)")
            purchase_price = st.number_input("‡¶¶‡¶æ‡¶Æ (‡¶ï‡ßá‡¶®‡¶æ ‡¶π‡¶≤‡ßá)")
            comment = st.text_area("", placeholder="‡¶¨‡¶ø‡¶¨‡¶∞‡¶£")        
            "---"
            submitted = st.form_submit_button("Save Data")
        
        if submitted:
            input_date = str(day) + "/" + str(month) + "/" +str(year)
            year_month = str(year) + "_" + str(month)
            period = str(year)
            db.insert_new_animal(str(datetime.utcnow()), input_date, period, year_month, goat_num, breed,gender,color,purchase_or_birth,age,weight,purchase_price,comment)

            st.success("Data saved!")
            

if selected == "‡¶ü‡¶ø‡¶ï‡¶æ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø":
    with st.form("entry_form2", clear_on_submit=True):
        # ----- GET ALL GOAT INFO FROM DATABASE------------
        items = db.fetch_all_periods_animal()
        df_vaccine = pd.DataFrame(items)
        gt_num = "AB-" + df_vaccine["goat_number"].astype(str) + "-" + df_vaccine["color"] + "-" + df_vaccine["breed"]
        gt = st.selectbox("‡¶õ‡¶æ‡¶ó‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", gt_num)
        gt = int(gt.split("-")[1])
        "---"
        d = st.date_input("‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶¶‡ßá‡ßü‡¶æ‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ")
        year = d.year
        month = d.month
        day = d.day
        reason = st.text_input("‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶¶‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£ (‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó)")
        med = st.text_input("‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶®")
        med_measure = st.text_input("‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶®-‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®")
        comment = st.text_area(label="‡¶¨‡¶ø‡¶¨‡¶∞‡¶£", value="", placeholder="‡¶¨‡¶ø‡¶¨‡¶∞‡¶£")
        "---"
        submitted = st.form_submit_button("Save Data")
    
    if submitted:
            input_date = str(day) + "/" + str(month) + "/" +str(year)
            year_month = str(year) + "_" + str(month)
            period = str(year)
            db.insert_new_vaccination(str(datetime.utcnow()), input_date, period, year_month, gt, reason, med, med_measure,comment)

            st.success("Data saved!")

if selected == "‡¶ü‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü":
    with st.form("entry_form3", clear_on_submit=True):
        # ----- GET ALL GOAT INFO FROM DATABASE------------
        items = db.fetch_all_periods_animal()
        df_animal = pd.DataFrame(items)
        gt_num = "AB-" + df_animal["goat_number"].astype(str) + "-" + df_animal["color"] + "-" + df_animal["breed"]
        gt = st.selectbox("‡¶õ‡¶æ‡¶ó‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", gt_num)
        gt = int(gt.split("-")[1])
        left_column, right_column = st.columns(2)
        submitted = left_column.form_submit_button("‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü")
        full_report = right_column.form_submit_button("‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü")
        if submitted:
            st.markdown("""---""")
            st.write("‡¶õ‡¶æ‡¶ó‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞  AB- " + str(gt) + " -‡¶è‡¶∞ ‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü")
            vacc = db.fetch_all_periods_vaccination()
            df_vacc = pd.DataFrame(vacc)
            df_vacc_goat = df_vacc[df_vacc["goat_number"] == gt][["input_date", "reason", "med","med_measure","comment"]]
            df_vacc_goat["input_date"] = pd.to_datetime(df_vacc_goat["input_date"], dayfirst=True)
            df_vacc_goat = df_vacc_goat.sort_values("input_date", ascending=False)
            df_vacc_goat["input_date"] = df_vacc_goat["input_date"].dt.strftime('%d/%m/%Y')
            df_vacc_goat_rename = df_vacc_goat.rename(columns= {"input_date": "‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ", "reason":"‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó", "med":"‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶®", "med_measure":"‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶®-‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®", "comment":"‡¶¨‡¶ø‡¶¨‡¶∞‡¶£"})
            interactive_df(df_vacc_goat_rename)
        if full_report:
            st.markdown("""---""")
            st.subheader("‡¶õ‡¶æ‡¶ó‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞  AB- " + str(gt) + " -‡¶è‡¶∞ ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü")
            selected_gt = df_animal[df_animal["goat_number"] == gt]
            if selected_gt["purchase_or_birth"].values[0] == "‡¶ï‡ßá‡¶®‡¶æ":
                st.write("‡¶õ‡¶æ‡¶ó‡¶≤‡¶ü‡¶ø ‡¶ï‡ßá‡¶®‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡¶ø‡¶≤ " + selected_gt["input_date"].values[0] + "  ‡¶è‡¶¨‡¶Ç ‡¶õ‡¶æ‡¶ó‡¶≤‡¶ü‡¶ø‡¶∞ ‡¶¶‡¶æ‡¶Æ : " + "‡ß≥ {:,.2f}".format(selected_gt["purchase_price"].values[0]))
            with st.container():
                left_column, right_column = st.columns(2)
                left_column.write("‡¶è‡¶ü‡¶æ " + str(selected_gt["gender"].values[0]))
                
            with st.container():
                left_column, right_column = st.columns(2)
                left_column.write("‡¶õ‡¶æ‡¶ó‡¶≤‡ßá‡¶∞ ‡¶¨‡ßü‡¶∏:  " + str(selected_gt["age"].values[0]))
                right_column.write("‡¶õ‡¶æ‡¶ó‡¶≤‡ßá‡¶∞ ‡¶∞‡¶ô:  " + str(selected_gt["color"].values[0]))

            with st.container():
                left_column, right_column = st.columns(2)
                left_column.write("‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ì‡¶ú‡¶®: " + str(selected_gt["weight"].values[0]))
                right_column.write("‡¶õ‡¶æ‡¶ó‡¶≤‡ßá‡¶∞ ‡¶ú‡¶æ‡¶§:  " + str(selected_gt["breed"].values[0]))
            
            st.write("‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ : " + selected_gt["comment"].values[0])
            vacc = db.fetch_all_periods_vaccination()
            df_vacc = pd.DataFrame(vacc)
            df_vacc_goat = df_vacc[df_vacc["goat_number"] == gt][["input_date", "reason", "med","med_measure","comment"]]
            df_vacc_goat["input_date"] = pd.to_datetime(df_vacc_goat["input_date"], dayfirst=True)
            df_vacc_goat = df_vacc_goat.sort_values("input_date", ascending=False)
            df_vacc_goat["input_date"] = df_vacc_goat["input_date"].dt.strftime('%d/%m/%Y')
            df_vacc_goat_rename = df_vacc_goat.rename(columns= {"input_date": "‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ", "reason":"‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó", "med":"‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶®", "med_measure":"‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶®-‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®", "comment":"‡¶¨‡¶ø‡¶¨‡¶∞‡¶£"})
            df_vacc_goat_rename = df_vacc_goat_rename.head(1)
            if not df_vacc_goat_rename.empty:
                st.write("‡¶õ‡¶æ‡¶ó‡¶≤‡¶ü‡¶ø‡¶ï‡ßá ‡¶∂‡ßá‡¶∑ " + df_vacc_goat_rename["‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ"].values[0]+"-‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá "+df_vacc_goat_rename["‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó"].values[0] +"-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø  "+ df_vacc_goat_rename["‡¶≠‡ßá‡¶ï‡¶∏‡¶ø‡¶®/‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶®"].values[0] + " ‡¶ü‡¶ø‡¶ï‡¶æ/‡¶î‡¶∑‡ßÅ‡¶ß ‡¶¶‡ßá‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡¶ø‡¶≤")
            
